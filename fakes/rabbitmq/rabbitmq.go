// Code generated by counterfeiter. DO NOT EDIT.
package rabbitmq

import (
	"sync"

	"github.com/batchcorp/go-template/backends/rabbitmq"
)

type FakeIRabbitMQ struct {
	GetStub        func() error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	GetConsumerChannelStub        func() chan string
	getConsumerChannelMutex       sync.RWMutex
	getConsumerChannelArgsForCall []struct {
	}
	getConsumerChannelReturns struct {
		result1 chan string
	}
	getConsumerChannelReturnsOnCall map[int]struct {
		result1 chan string
	}
	ListenStub        func()
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
	}
	PublishStub        func([]byte)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIRabbitMQ) Get() error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
	}{})
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *FakeIRabbitMQ) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIRabbitMQ) GetCalls(stub func() error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeIRabbitMQ) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRabbitMQ) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRabbitMQ) GetConsumerChannel() chan string {
	fake.getConsumerChannelMutex.Lock()
	ret, specificReturn := fake.getConsumerChannelReturnsOnCall[len(fake.getConsumerChannelArgsForCall)]
	fake.getConsumerChannelArgsForCall = append(fake.getConsumerChannelArgsForCall, struct {
	}{})
	fake.recordInvocation("GetConsumerChannel", []interface{}{})
	fake.getConsumerChannelMutex.Unlock()
	if fake.GetConsumerChannelStub != nil {
		return fake.GetConsumerChannelStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getConsumerChannelReturns
	return fakeReturns.result1
}

func (fake *FakeIRabbitMQ) GetConsumerChannelCallCount() int {
	fake.getConsumerChannelMutex.RLock()
	defer fake.getConsumerChannelMutex.RUnlock()
	return len(fake.getConsumerChannelArgsForCall)
}

func (fake *FakeIRabbitMQ) GetConsumerChannelCalls(stub func() chan string) {
	fake.getConsumerChannelMutex.Lock()
	defer fake.getConsumerChannelMutex.Unlock()
	fake.GetConsumerChannelStub = stub
}

func (fake *FakeIRabbitMQ) GetConsumerChannelReturns(result1 chan string) {
	fake.getConsumerChannelMutex.Lock()
	defer fake.getConsumerChannelMutex.Unlock()
	fake.GetConsumerChannelStub = nil
	fake.getConsumerChannelReturns = struct {
		result1 chan string
	}{result1}
}

func (fake *FakeIRabbitMQ) GetConsumerChannelReturnsOnCall(i int, result1 chan string) {
	fake.getConsumerChannelMutex.Lock()
	defer fake.getConsumerChannelMutex.Unlock()
	fake.GetConsumerChannelStub = nil
	if fake.getConsumerChannelReturnsOnCall == nil {
		fake.getConsumerChannelReturnsOnCall = make(map[int]struct {
			result1 chan string
		})
	}
	fake.getConsumerChannelReturnsOnCall[i] = struct {
		result1 chan string
	}{result1}
}

func (fake *FakeIRabbitMQ) Listen() {
	fake.listenMutex.Lock()
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
	}{})
	fake.recordInvocation("Listen", []interface{}{})
	fake.listenMutex.Unlock()
	if fake.ListenStub != nil {
		fake.ListenStub()
	}
}

func (fake *FakeIRabbitMQ) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

func (fake *FakeIRabbitMQ) ListenCalls(stub func()) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = stub
}

func (fake *FakeIRabbitMQ) Publish(arg1 []byte) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Publish", []interface{}{arg1Copy})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		fake.PublishStub(arg1)
	}
}

func (fake *FakeIRabbitMQ) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeIRabbitMQ) PublishCalls(stub func([]byte)) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeIRabbitMQ) PublishArgsForCall(i int) []byte {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIRabbitMQ) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getConsumerChannelMutex.RLock()
	defer fake.getConsumerChannelMutex.RUnlock()
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIRabbitMQ) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rabbitmq.IRabbitMQ = new(FakeIRabbitMQ)
