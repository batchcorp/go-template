// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manifest.proto

package events

import (
	fmt "fmt"
	records "github.com/batchcorp/schemas/build/go/events/records"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This type is used during data collection -- the collector emits it to the
// inbound queue which is then consumed by the writer.
type Manifest struct {
	Context *Manifest_Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Types that are valid to be assigned to Record:
	//	*Manifest_Kafka
	//	*Manifest_Http
	//	*Manifest_Generic
	//	*Manifest_Amqp
	//	*Manifest_Sqs
	Record               isManifest_Record `protobuf_oneof:"record"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Manifest) Reset()         { *m = Manifest{} }
func (m *Manifest) String() string { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()    {}
func (*Manifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{0}
}

func (m *Manifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Manifest.Unmarshal(m, b)
}
func (m *Manifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Manifest.Marshal(b, m, deterministic)
}
func (m *Manifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manifest.Merge(m, src)
}
func (m *Manifest) XXX_Size() int {
	return xxx_messageInfo_Manifest.Size(m)
}
func (m *Manifest) XXX_DiscardUnknown() {
	xxx_messageInfo_Manifest.DiscardUnknown(m)
}

var xxx_messageInfo_Manifest proto.InternalMessageInfo

func (m *Manifest) GetContext() *Manifest_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type isManifest_Record interface {
	isManifest_Record()
}

type Manifest_Kafka struct {
	Kafka *records.KafkaSinkRecord `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type Manifest_Http struct {
	Http *records.HTTPRecord `protobuf:"bytes,101,opt,name=http,proto3,oneof"`
}

type Manifest_Generic struct {
	Generic *records.GenericRecord `protobuf:"bytes,102,opt,name=generic,proto3,oneof"`
}

type Manifest_Amqp struct {
	Amqp *records.AMQPSinkRecord `protobuf:"bytes,103,opt,name=amqp,proto3,oneof"`
}

type Manifest_Sqs struct {
	Sqs *records.SQSRecord `protobuf:"bytes,104,opt,name=sqs,proto3,oneof"`
}

func (*Manifest_Kafka) isManifest_Record() {}

func (*Manifest_Http) isManifest_Record() {}

func (*Manifest_Generic) isManifest_Record() {}

func (*Manifest_Amqp) isManifest_Record() {}

func (*Manifest_Sqs) isManifest_Record() {}

func (m *Manifest) GetRecord() isManifest_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Manifest) GetKafka() *records.KafkaSinkRecord {
	if x, ok := m.GetRecord().(*Manifest_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *Manifest) GetHttp() *records.HTTPRecord {
	if x, ok := m.GetRecord().(*Manifest_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Manifest) GetGeneric() *records.GenericRecord {
	if x, ok := m.GetRecord().(*Manifest_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *Manifest) GetAmqp() *records.AMQPSinkRecord {
	if x, ok := m.GetRecord().(*Manifest_Amqp); ok {
		return x.Amqp
	}
	return nil
}

func (m *Manifest) GetSqs() *records.SQSRecord {
	if x, ok := m.GetRecord().(*Manifest_Sqs); ok {
		return x.Sqs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Manifest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Manifest_Kafka)(nil),
		(*Manifest_Http)(nil),
		(*Manifest_Generic)(nil),
		(*Manifest_Amqp)(nil),
		(*Manifest_Sqs)(nil),
	}
}

// Info indicating which team the inbound message belongs to,
// what collection config the writer should use and debug info.
type Manifest_Context struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Collect              *Collect `protobuf:"bytes,2,opt,name=collect,proto3" json:"collect,omitempty"`
	Info                 *Info    `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Manifest_Context) Reset()         { *m = Manifest_Context{} }
func (m *Manifest_Context) String() string { return proto.CompactTextString(m) }
func (*Manifest_Context) ProtoMessage()    {}
func (*Manifest_Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb23f43f7afb4c1, []int{0, 0}
}

func (m *Manifest_Context) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Manifest_Context.Unmarshal(m, b)
}
func (m *Manifest_Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Manifest_Context.Marshal(b, m, deterministic)
}
func (m *Manifest_Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manifest_Context.Merge(m, src)
}
func (m *Manifest_Context) XXX_Size() int {
	return xxx_messageInfo_Manifest_Context.Size(m)
}
func (m *Manifest_Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Manifest_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Manifest_Context proto.InternalMessageInfo

func (m *Manifest_Context) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Manifest_Context) GetCollect() *Collect {
	if m != nil {
		return m.Collect
	}
	return nil
}

func (m *Manifest_Context) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Manifest)(nil), "events.Manifest")
	proto.RegisterType((*Manifest_Context)(nil), "events.Manifest.Context")
}

func init() { proto.RegisterFile("manifest.proto", fileDescriptor_0bb23f43f7afb4c1) }

var fileDescriptor_0bb23f43f7afb4c1 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcb, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x45, 0x10, 0x48, 0xbd, 0xc5, 0x12, 0xb5, 0x99, 0x15, 0x71, 0x61, 0x24, 0xd1, 0x8e,
	0xc1, 0x27, 0x10, 0x16, 0x62, 0x0c, 0x09, 0x0c, 0xac, 0xdc, 0x75, 0x4a, 0xe7, 0x12, 0x98, 0x16,
	0xa6, 0xc5, 0xf0, 0x4c, 0x3e, 0xa5, 0xe9, 0x35, 0xc1, 0xdd, 0xe4, 0x3b, 0xdf, 0xdf, 0xf9, 0xdb,
	0x03, 0xae, 0x2a, 0xc2, 0xcb, 0x8c, 0x49, 0x85, 0xb7, 0xb5, 0x50, 0x02, 0xb6, 0xd9, 0x0f, 0xe3,
	0x4a, 0x46, 0x40, 0x31, 0x52, 0x59, 0x16, 0x5d, 0x52, 0xb1, 0xd9, 0x30, 0xea, 0x94, 0x08, 0x94,
	0x3c, 0x13, 0xee, 0xbb, 0x57, 0x33, 0x2a, 0xea, 0x95, 0x8c, 0xd7, 0x24, 0x5b, 0x13, 0x07, 0xa1,
	0x87, 0x85, 0x52, 0x5b, 0xc7, 0x6e, 0x3d, 0xcb, 0x19, 0x67, 0x75, 0x49, 0xff, 0xab, 0xa4, 0xda,
	0x79, 0xf5, 0xc6, 0x33, 0xb9, 0x93, 0x16, 0x3d, 0xfc, 0x36, 0x41, 0x77, 0xea, 0x8a, 0xc2, 0x21,
	0xe8, 0x50, 0xc1, 0x15, 0x3b, 0x28, 0xd4, 0xe8, 0x37, 0x9e, 0xce, 0x87, 0x08, 0xdb, 0xd2, 0xd8,
	0x2b, 0x78, 0x6c, 0xe7, 0x89, 0x17, 0xe1, 0x2b, 0x38, 0x33, 0x0d, 0xd1, 0xca, 0x25, 0xdc, 0x3f,
	0xf0, 0x97, 0xa6, 0x8b, 0x92, 0xaf, 0x13, 0x03, 0x26, 0x27, 0x89, 0x15, 0xe1, 0x00, 0xb4, 0x74,
	0x7d, 0xc4, 0x4c, 0xa0, 0x17, 0x02, 0x93, 0xe5, 0x72, 0x16, 0x5c, 0xa3, 0xe8, 0x42, 0xee, 0x56,
	0x28, 0x33, 0xf6, 0x5d, 0xb0, 0x3f, 0x2c, 0x0f, 0x01, 0x2f, 0xc2, 0x17, 0xd0, 0xd2, 0x57, 0x46,
	0xb9, 0x09, 0xdc, 0x87, 0xc0, 0xfb, 0x74, 0x3e, 0x3b, 0xaa, 0x63, 0x34, 0xf8, 0x08, 0x9a, 0x72,
	0x27, 0x51, 0x61, 0x6c, 0x18, 0xec, 0xc5, 0x7c, 0x11, 0x44, 0x2d, 0x44, 0x07, 0xd0, 0x71, 0x77,
	0x87, 0x7d, 0xd0, 0xd2, 0x3b, 0x74, 0x6f, 0x74, 0xe1, 0xdf, 0x68, 0xc9, 0x48, 0x95, 0x98, 0x09,
	0x1c, 0xe8, 0x87, 0x34, 0x9b, 0x45, 0xa7, 0x46, 0xba, 0xf6, 0xd2, 0xd8, 0xe2, 0xc4, 0xcf, 0xf5,
	0x61, 0x7a, 0xeb, 0xa8, 0x79, 0x7c, 0xd8, 0x27, 0xcf, 0x44, 0x62, 0x26, 0xa3, 0x2e, 0x68, 0xdb,
	0x56, 0x23, 0xfc, 0xfd, 0x9c, 0x97, 0xaa, 0xd8, 0xa7, 0x98, 0x8a, 0x2a, 0x4e, 0x89, 0xa2, 0x05,
	0x15, 0xf5, 0x36, 0x96, 0xb4, 0x60, 0x15, 0x91, 0x71, 0xba, 0x2f, 0x37, 0xab, 0x38, 0x17, 0xb1,
	0x3d, 0x24, 0x6d, 0x9b, 0x1d, 0xbf, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x96, 0x16, 0x1a, 0xe5,
	0x8b, 0x02, 0x00, 0x00,
}
