// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Schema_Type int32

const (
	Schema_UNKNOWN  Schema_Type = 0
	Schema_PLAIN    Schema_Type = 1
	Schema_JSON     Schema_Type = 2
	Schema_PROTOBUF Schema_Type = 3
)

var Schema_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "PLAIN",
	2: "JSON",
	3: "PROTOBUF",
}

var Schema_Type_value = map[string]int32{
	"UNKNOWN":  0,
	"PLAIN":    1,
	"JSON":     2,
	"PROTOBUF": 3,
}

func (x Schema_Type) String() string {
	return proto.EnumName(Schema_Type_name, int32(x))
}

func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0, 0}
}

type Schema_UpdateType int32

const (
	Schema_INITIAL  Schema_UpdateType = 0
	Schema_EXISTING Schema_UpdateType = 1
)

var Schema_UpdateType_name = map[int32]string{
	0: "INITIAL",
	1: "EXISTING",
}

var Schema_UpdateType_value = map[string]int32{
	"INITIAL":  0,
	"EXISTING": 1,
}

func (x Schema_UpdateType) String() string {
	return proto.EnumName(Schema_UpdateType_name, int32(x))
}

func (Schema_UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0, 1}
}

type Schema struct {
	// The collector will ONLY fill out the 'id' for incoming messages - it is
	// the responsibility of downstream consumers to lookup the corresponding
	// schema configuration by 'id'.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates the "data type" - what format are the collectors expecting to
	// receive the events in?
	Type Schema_Type       `protobuf:"varint,2,opt,name=type,proto3,enum=events.Schema_Type" json:"type,omitempty"`
	Raw  map[string][]byte `protobuf:"bytes,3,rep,name=raw,proto3" json:"raw,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Only used when Type == PROTOBUF
	ProtobufMessageName       string `protobuf:"bytes,4,opt,name=protobuf_message_name,json=protobufMessageName,proto3" json:"protobuf_message_name,omitempty"`
	ProtobufFileDescriptorSet []byte `protobuf:"bytes,5,opt,name=protobuf_file_descriptor_set,json=protobufFileDescriptorSet,proto3" json:"protobuf_file_descriptor_set,omitempty"`
	// The following fields are used by the schema-manager to facilitate schema updates
	UpdateType           Schema_UpdateType `protobuf:"varint,6,opt,name=update_type,json=updateType,proto3,enum=events.Schema_UpdateType" json:"update_type,omitempty"`
	UpdateCollectToken   string            `protobuf:"bytes,7,opt,name=update_collect_token,json=updateCollectToken,proto3" json:"update_collect_token,omitempty"`
	UpdateParquetSchema  []byte            `protobuf:"bytes,8,opt,name=update_parquet_schema,json=updateParquetSchema,proto3" json:"update_parquet_schema,omitempty"`
	UpdateSqlSchema      []byte            `protobuf:"bytes,9,opt,name=update_sql_schema,json=updateSqlSchema,proto3" json:"update_sql_schema,omitempty"`
	UpdateFingerprint    string            `protobuf:"bytes,10,opt,name=update_fingerprint,json=updateFingerprint,proto3" json:"update_fingerprint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Schema) GetType() Schema_Type {
	if m != nil {
		return m.Type
	}
	return Schema_UNKNOWN
}

func (m *Schema) GetRaw() map[string][]byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Schema) GetProtobufMessageName() string {
	if m != nil {
		return m.ProtobufMessageName
	}
	return ""
}

func (m *Schema) GetProtobufFileDescriptorSet() []byte {
	if m != nil {
		return m.ProtobufFileDescriptorSet
	}
	return nil
}

func (m *Schema) GetUpdateType() Schema_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return Schema_INITIAL
}

func (m *Schema) GetUpdateCollectToken() string {
	if m != nil {
		return m.UpdateCollectToken
	}
	return ""
}

func (m *Schema) GetUpdateParquetSchema() []byte {
	if m != nil {
		return m.UpdateParquetSchema
	}
	return nil
}

func (m *Schema) GetUpdateSqlSchema() []byte {
	if m != nil {
		return m.UpdateSqlSchema
	}
	return nil
}

func (m *Schema) GetUpdateFingerprint() string {
	if m != nil {
		return m.UpdateFingerprint
	}
	return ""
}

func init() {
	proto.RegisterEnum("events.Schema_Type", Schema_Type_name, Schema_Type_value)
	proto.RegisterEnum("events.Schema_UpdateType", Schema_UpdateType_name, Schema_UpdateType_value)
	proto.RegisterType((*Schema)(nil), "events.Schema")
	proto.RegisterMapType((map[string][]byte)(nil), "events.Schema.RawEntry")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xdd, 0x6f, 0x93, 0x50,
	0x18, 0x87, 0x47, 0xa1, 0x5d, 0xfb, 0xb6, 0x99, 0x78, 0x3a, 0x23, 0x33, 0x5e, 0x34, 0xbd, 0x59,
	0x35, 0x0a, 0xa6, 0x26, 0x8b, 0xd9, 0x8d, 0xd9, 0x74, 0x35, 0xe8, 0xa4, 0x0d, 0xd0, 0x68, 0xbc,
	0x21, 0x07, 0x78, 0xdb, 0x92, 0xf1, 0x55, 0x38, 0x6c, 0xe9, 0x5f, 0xee, 0xed, 0xc2, 0x39, 0xb4,
	0x4b, 0x76, 0x77, 0xc8, 0xf3, 0xfc, 0x78, 0xbf, 0x60, 0x50, 0x06, 0x1b, 0x4c, 0xa8, 0x9e, 0x17,
	0x19, 0xcb, 0x48, 0x07, 0xef, 0x31, 0x65, 0xe5, 0xf8, 0xbf, 0x02, 0x1d, 0x87, 0x03, 0x72, 0x02,
	0xad, 0x28, 0xd4, 0xa4, 0x91, 0x34, 0xe9, 0xd9, 0xad, 0x28, 0x24, 0xe7, 0xa0, 0xb0, 0x5d, 0x8e,
	0x5a, 0x6b, 0x24, 0x4d, 0x4e, 0xa6, 0x43, 0x5d, 0x24, 0x74, 0x61, 0xeb, 0xee, 0x2e, 0x47, 0x9b,
	0x0b, 0xe4, 0x1d, 0xc8, 0x05, 0x7d, 0xd0, 0xe4, 0x91, 0x3c, 0xe9, 0x4f, 0x5f, 0x3f, 0xf3, 0x6c,
	0xfa, 0x70, 0x93, 0xb2, 0x62, 0x67, 0xd7, 0x0e, 0x99, 0xc2, 0x2b, 0x5e, 0xdf, 0xaf, 0x56, 0x5e,
	0x82, 0x65, 0x49, 0xd7, 0xe8, 0xa5, 0x34, 0x41, 0x4d, 0xe1, 0x65, 0x87, 0x7b, 0xf8, 0x5b, 0x30,
	0x8b, 0x26, 0x48, 0xbe, 0xc2, 0xdb, 0x43, 0x66, 0x15, 0xc5, 0xe8, 0x85, 0x58, 0x06, 0x45, 0x94,
	0xb3, 0xac, 0xf0, 0x4a, 0x64, 0x5a, 0x7b, 0x24, 0x4d, 0x06, 0xf6, 0xd9, 0xde, 0x99, 0x45, 0x31,
	0x7e, 0x3f, 0x18, 0x0e, 0x32, 0x72, 0x09, 0xfd, 0x2a, 0x0f, 0x29, 0x43, 0x8f, 0xcf, 0xd3, 0xe1,
	0xf3, 0x9c, 0x3d, 0xeb, 0x73, 0xc9, 0x0d, 0x3e, 0x15, 0x54, 0x87, 0x37, 0xf9, 0x04, 0xa7, 0x4d,
	0x36, 0xc8, 0xe2, 0x18, 0x03, 0xe6, 0xb1, 0xec, 0x0e, 0x53, 0xed, 0x98, 0xf7, 0x4b, 0x04, 0xfb,
	0x26, 0x90, 0x5b, 0x93, 0x7a, 0xc4, 0x26, 0x91, 0xd3, 0x62, 0x5b, 0x21, 0xf3, 0xc4, 0xe2, 0xb5,
	0x2e, 0xef, 0x73, 0x28, 0xe0, 0x42, 0xb0, 0x66, 0xf5, 0xef, 0xe1, 0x65, 0x93, 0x29, 0xb7, 0xf1,
	0xde, 0xef, 0x71, 0xff, 0x85, 0x00, 0xce, 0x36, 0x6e, 0xdc, 0x8f, 0xd0, 0x54, 0xf5, 0x56, 0x51,
	0xba, 0xc6, 0x22, 0x2f, 0xa2, 0x94, 0x69, 0xc0, 0xfb, 0x69, 0xfe, 0x32, 0x7b, 0x02, 0x6f, 0x2e,
	0xa0, 0xbb, 0x3f, 0x01, 0x51, 0x41, 0xbe, 0xc3, 0x5d, 0x73, 0xe2, 0xfa, 0x49, 0x4e, 0xa1, 0x7d,
	0x4f, 0xe3, 0x4a, 0x1c, 0x79, 0x60, 0x8b, 0x8f, 0xcb, 0xd6, 0x17, 0x69, 0x7c, 0x01, 0x0a, 0x5f,
	0x40, 0x1f, 0x8e, 0x97, 0xd6, 0x2f, 0x6b, 0xfe, 0xc7, 0x52, 0x8f, 0x48, 0x0f, 0xda, 0x8b, 0xdb,
	0x2b, 0xd3, 0x52, 0x25, 0xd2, 0x05, 0xe5, 0xa7, 0x33, 0xb7, 0xd4, 0x16, 0x19, 0x40, 0x77, 0x61,
	0xcf, 0xdd, 0xf9, 0xf5, 0x72, 0xa6, 0xca, 0xe3, 0x73, 0x80, 0xa7, 0x55, 0xd6, 0x69, 0xd3, 0x32,
	0x5d, 0xf3, 0xea, 0x56, 0x3d, 0xaa, 0xc5, 0x9b, 0xbf, 0xa6, 0xe3, 0x9a, 0xd6, 0x0f, 0x55, 0xba,
	0xd6, 0xff, 0x7d, 0x58, 0x47, 0x6c, 0x53, 0xf9, 0x7a, 0x90, 0x25, 0x86, 0x4f, 0x59, 0xb0, 0x09,
	0xb2, 0x22, 0x37, 0xc4, 0xf4, 0xa5, 0xe1, 0x57, 0x51, 0x1c, 0x1a, 0xeb, 0xcc, 0x10, 0x77, 0xf2,
	0x3b, 0xfc, 0xc0, 0x9f, 0x1f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xbf, 0xfd, 0x3c, 0xc8, 0x02,
	0x00, 0x00,
}
