// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscription.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Subscription_Action int32

const (
	Subscription_UNSET_ACTION Subscription_Action = 0
	Subscription_CREATED      Subscription_Action = 1
	Subscription_UPDATED      Subscription_Action = 2
	Subscription_DELETED      Subscription_Action = 3
)

var Subscription_Action_name = map[int32]string{
	0: "UNSET_ACTION",
	1: "CREATED",
	2: "UPDATED",
	3: "DELETED",
}

var Subscription_Action_value = map[string]int32{
	"UNSET_ACTION": 0,
	"CREATED":      1,
	"UPDATED":      2,
	"DELETED":      3,
}

func (x Subscription_Action) String() string {
	return proto.EnumName(Subscription_Action_name, int32(x))
}

func (Subscription_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c4f8ad1a64b2bad6, []int{0, 0}
}

type Subscription_ProductType int32

const (
	Subscription_UNSET_PRODUCT_TYPE Subscription_ProductType = 0
	Subscription_PLAN               Subscription_ProductType = 1
	Subscription_ADDON              Subscription_ProductType = 2
)

var Subscription_ProductType_name = map[int32]string{
	0: "UNSET_PRODUCT_TYPE",
	1: "PLAN",
	2: "ADDON",
}

var Subscription_ProductType_value = map[string]int32{
	"UNSET_PRODUCT_TYPE": 0,
	"PLAN":               1,
	"ADDON":              2,
}

func (x Subscription_ProductType) String() string {
	return proto.EnumName(Subscription_ProductType_name, int32(x))
}

func (Subscription_ProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c4f8ad1a64b2bad6, []int{0, 1}
}

// Emitted by billing service as a status update
type Subscription struct {
	Action                   Subscription_Action     `protobuf:"varint,1,opt,name=action,proto3,enum=events.Subscription_Action" json:"action,omitempty"`
	StripeId                 string                  `protobuf:"bytes,2,opt,name=stripe_id,json=stripeId,proto3" json:"stripe_id,omitempty"`
	StripeStatus             string                  `protobuf:"bytes,3,opt,name=stripe_status,json=stripeStatus,proto3" json:"stripe_status,omitempty"`
	StripeCreatedAt          int64                   `protobuf:"varint,4,opt,name=stripe_created_at,json=stripeCreatedAt,proto3" json:"stripe_created_at,omitempty"`
	StripeCurrentPeriodStart int64                   `protobuf:"varint,5,opt,name=stripe_current_period_start,json=stripeCurrentPeriodStart,proto3" json:"stripe_current_period_start,omitempty"`
	StripeCurrentPeriodEnd   int64                   `protobuf:"varint,6,opt,name=stripe_current_period_end,json=stripeCurrentPeriodEnd,proto3" json:"stripe_current_period_end,omitempty"`
	StripePaymentMethodId    string                  `protobuf:"bytes,7,opt,name=stripe_payment_method_id,json=stripePaymentMethodId,proto3" json:"stripe_payment_method_id,omitempty"`
	StripeCustomer           *Subscription_Customer  `protobuf:"bytes,8,opt,name=stripe_customer,json=stripeCustomer,proto3" json:"stripe_customer,omitempty"`
	StripeProducts           []*Subscription_Product `protobuf:"bytes,9,rep,name=stripe_products,json=stripeProducts,proto3" json:"stripe_products,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f8ad1a64b2bad6, []int{0}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetAction() Subscription_Action {
	if m != nil {
		return m.Action
	}
	return Subscription_UNSET_ACTION
}

func (m *Subscription) GetStripeId() string {
	if m != nil {
		return m.StripeId
	}
	return ""
}

func (m *Subscription) GetStripeStatus() string {
	if m != nil {
		return m.StripeStatus
	}
	return ""
}

func (m *Subscription) GetStripeCreatedAt() int64 {
	if m != nil {
		return m.StripeCreatedAt
	}
	return 0
}

func (m *Subscription) GetStripeCurrentPeriodStart() int64 {
	if m != nil {
		return m.StripeCurrentPeriodStart
	}
	return 0
}

func (m *Subscription) GetStripeCurrentPeriodEnd() int64 {
	if m != nil {
		return m.StripeCurrentPeriodEnd
	}
	return 0
}

func (m *Subscription) GetStripePaymentMethodId() string {
	if m != nil {
		return m.StripePaymentMethodId
	}
	return ""
}

func (m *Subscription) GetStripeCustomer() *Subscription_Customer {
	if m != nil {
		return m.StripeCustomer
	}
	return nil
}

func (m *Subscription) GetStripeProducts() []*Subscription_Product {
	if m != nil {
		return m.StripeProducts
	}
	return nil
}

type Subscription_Product struct {
	Type            Subscription_ProductType `protobuf:"varint,1,opt,name=type,proto3,enum=events.Subscription_ProductType" json:"type,omitempty"`
	StripeItemId    string                   `protobuf:"bytes,2,opt,name=stripe_item_id,json=stripeItemId,proto3" json:"stripe_item_id,omitempty"`
	StripeProductId string                   `protobuf:"bytes,3,opt,name=stripe_product_id,json=stripeProductId,proto3" json:"stripe_product_id,omitempty"`
	StripeName      string                   `protobuf:"bytes,4,opt,name=stripe_name,json=stripeName,proto3" json:"stripe_name,omitempty"`
	StripePrice     float64                  `protobuf:"fixed64,5,opt,name=stripe_price,json=stripePrice,proto3" json:"stripe_price,omitempty"`
	StripeCurrency  string                   `protobuf:"bytes,6,opt,name=stripe_currency,json=stripeCurrency,proto3" json:"stripe_currency,omitempty"`
	StripeQuantity  int64                    `protobuf:"varint,7,opt,name=stripe_quantity,json=stripeQuantity,proto3" json:"stripe_quantity,omitempty"`
	// How many "units" does this product represent? Ie. 10 seats, 5 collections, 100000 bytes, etc.
	BaseValue            int64    `protobuf:"varint,8,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription_Product) Reset()         { *m = Subscription_Product{} }
func (m *Subscription_Product) String() string { return proto.CompactTextString(m) }
func (*Subscription_Product) ProtoMessage()    {}
func (*Subscription_Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f8ad1a64b2bad6, []int{0, 0}
}

func (m *Subscription_Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription_Product.Unmarshal(m, b)
}
func (m *Subscription_Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription_Product.Marshal(b, m, deterministic)
}
func (m *Subscription_Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription_Product.Merge(m, src)
}
func (m *Subscription_Product) XXX_Size() int {
	return xxx_messageInfo_Subscription_Product.Size(m)
}
func (m *Subscription_Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription_Product proto.InternalMessageInfo

func (m *Subscription_Product) GetType() Subscription_ProductType {
	if m != nil {
		return m.Type
	}
	return Subscription_UNSET_PRODUCT_TYPE
}

func (m *Subscription_Product) GetStripeItemId() string {
	if m != nil {
		return m.StripeItemId
	}
	return ""
}

func (m *Subscription_Product) GetStripeProductId() string {
	if m != nil {
		return m.StripeProductId
	}
	return ""
}

func (m *Subscription_Product) GetStripeName() string {
	if m != nil {
		return m.StripeName
	}
	return ""
}

func (m *Subscription_Product) GetStripePrice() float64 {
	if m != nil {
		return m.StripePrice
	}
	return 0
}

func (m *Subscription_Product) GetStripeCurrency() string {
	if m != nil {
		return m.StripeCurrency
	}
	return ""
}

func (m *Subscription_Product) GetStripeQuantity() int64 {
	if m != nil {
		return m.StripeQuantity
	}
	return 0
}

func (m *Subscription_Product) GetBaseValue() int64 {
	if m != nil {
		return m.BaseValue
	}
	return 0
}

type Subscription_Customer struct {
	StripeId             string   `protobuf:"bytes,1,opt,name=stripe_id,json=stripeId,proto3" json:"stripe_id,omitempty"`
	StripeName           string   `protobuf:"bytes,2,opt,name=stripe_name,json=stripeName,proto3" json:"stripe_name,omitempty"`
	StripeEmail          string   `protobuf:"bytes,3,opt,name=stripe_email,json=stripeEmail,proto3" json:"stripe_email,omitempty"`
	StripeCreatedAt      int64    `protobuf:"varint,4,opt,name=stripe_created_at,json=stripeCreatedAt,proto3" json:"stripe_created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription_Customer) Reset()         { *m = Subscription_Customer{} }
func (m *Subscription_Customer) String() string { return proto.CompactTextString(m) }
func (*Subscription_Customer) ProtoMessage()    {}
func (*Subscription_Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f8ad1a64b2bad6, []int{0, 1}
}

func (m *Subscription_Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription_Customer.Unmarshal(m, b)
}
func (m *Subscription_Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription_Customer.Marshal(b, m, deterministic)
}
func (m *Subscription_Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription_Customer.Merge(m, src)
}
func (m *Subscription_Customer) XXX_Size() int {
	return xxx_messageInfo_Subscription_Customer.Size(m)
}
func (m *Subscription_Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription_Customer proto.InternalMessageInfo

func (m *Subscription_Customer) GetStripeId() string {
	if m != nil {
		return m.StripeId
	}
	return ""
}

func (m *Subscription_Customer) GetStripeName() string {
	if m != nil {
		return m.StripeName
	}
	return ""
}

func (m *Subscription_Customer) GetStripeEmail() string {
	if m != nil {
		return m.StripeEmail
	}
	return ""
}

func (m *Subscription_Customer) GetStripeCreatedAt() int64 {
	if m != nil {
		return m.StripeCreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("events.Subscription_Action", Subscription_Action_name, Subscription_Action_value)
	proto.RegisterEnum("events.Subscription_ProductType", Subscription_ProductType_name, Subscription_ProductType_value)
	proto.RegisterType((*Subscription)(nil), "events.Subscription")
	proto.RegisterType((*Subscription_Product)(nil), "events.Subscription.Product")
	proto.RegisterType((*Subscription_Customer)(nil), "events.Subscription.Customer")
}

func init() { proto.RegisterFile("subscription.proto", fileDescriptor_c4f8ad1a64b2bad6) }

var fileDescriptor_c4f8ad1a64b2bad6 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x6f, 0x6b, 0xd3, 0x50,
	0x14, 0xc6, 0x97, 0x76, 0xeb, 0x9a, 0xd3, 0xba, 0xd5, 0x0b, 0x8e, 0xb8, 0x39, 0xac, 0x53, 0xb0,
	0x88, 0xb4, 0xb0, 0x09, 0xa2, 0xe0, 0x8b, 0xd8, 0x46, 0x08, 0xcc, 0x2e, 0xa6, 0x99, 0xa0, 0x6f,
	0xc2, 0x4d, 0xee, 0x65, 0x0d, 0x2c, 0x7f, 0xcc, 0xbd, 0x19, 0xf4, 0x93, 0xf8, 0x8d, 0xfc, 0x06,
	0x7e, 0x1f, 0xb9, 0x7f, 0xd2, 0x65, 0xa3, 0x0c, 0x7c, 0xd7, 0xf3, 0x9c, 0xdf, 0x79, 0x7a, 0xef,
	0x7d, 0x7a, 0x0a, 0x88, 0x55, 0x11, 0x8b, 0xcb, 0xa4, 0xe0, 0x49, 0x9e, 0x8d, 0x8b, 0x32, 0xe7,
	0x39, 0xea, 0xd0, 0x1b, 0x9a, 0x71, 0x76, 0xf2, 0xb7, 0x0b, 0xfd, 0x45, 0xa3, 0x8d, 0xce, 0xa0,
	0x83, 0x63, 0xf1, 0xc9, 0x32, 0x86, 0xc6, 0x68, 0xef, 0xf4, 0x68, 0xac, 0xc8, 0x71, 0x93, 0x1a,
	0xdb, 0x12, 0xf1, 0x35, 0x8a, 0x8e, 0xc0, 0x64, 0xbc, 0x4c, 0x0a, 0x1a, 0x26, 0xc4, 0x6a, 0x0d,
	0x8d, 0x91, 0xe9, 0x77, 0x95, 0xe0, 0x12, 0xf4, 0x12, 0x1e, 0xe9, 0x26, 0xe3, 0x98, 0x57, 0xcc,
	0x6a, 0x4b, 0xa0, 0xaf, 0xc4, 0x85, 0xd4, 0xd0, 0x1b, 0x78, 0xac, 0xa1, 0xb8, 0xa4, 0x98, 0x53,
	0x12, 0x62, 0x6e, 0x6d, 0x0f, 0x8d, 0x51, 0xdb, 0xdf, 0x57, 0x8d, 0xa9, 0xd2, 0x6d, 0x8e, 0x3e,
	0xc1, 0x51, 0xcd, 0x56, 0x65, 0x49, 0x33, 0x1e, 0x16, 0xb4, 0x4c, 0x72, 0x22, 0xfc, 0x4b, 0x6e,
	0xed, 0xc8, 0x29, 0x4b, 0x4f, 0x29, 0xc2, 0x93, 0xc0, 0x42, 0xf4, 0xd1, 0x07, 0x78, 0xba, 0x79,
	0x9c, 0x66, 0xc4, 0xea, 0xc8, 0xe1, 0x83, 0x0d, 0xc3, 0x4e, 0x46, 0xd0, 0x7b, 0xd0, 0xb6, 0x61,
	0x81, 0x57, 0xa9, 0x18, 0x4d, 0x29, 0x5f, 0xe6, 0x44, 0x5c, 0x7b, 0x57, 0xde, 0xea, 0x89, 0xea,
	0x7b, 0xaa, 0xfd, 0x55, 0x76, 0x5d, 0x82, 0xbe, 0xc0, 0xfe, 0xfa, 0x3b, 0x19, 0xcf, 0x53, 0x5a,
	0x5a, 0xdd, 0xa1, 0x31, 0xea, 0x9d, 0x1e, 0x6f, 0x7c, 0xde, 0xa9, 0x86, 0xfc, 0xbd, 0xfa, 0x20,
	0xaa, 0x46, 0xce, 0xda, 0xa7, 0x28, 0x73, 0x52, 0xc5, 0x9c, 0x59, 0xe6, 0xb0, 0x3d, 0xea, 0x9d,
	0x3e, 0xdb, 0xe8, 0xe3, 0x29, 0xa8, 0xb6, 0xd1, 0x25, 0x3b, 0xfc, 0xd3, 0x82, 0x5d, 0x5d, 0xa0,
	0x77, 0xb0, 0xcd, 0x57, 0x05, 0xd5, 0x71, 0x0f, 0x1f, 0xf2, 0x09, 0x56, 0x05, 0xf5, 0x25, 0x8d,
	0x5e, 0xc1, 0x5e, 0x9d, 0x38, 0xa7, 0xe9, 0x6d, 0xec, 0x3a, 0x55, 0x97, 0xd3, 0xd4, 0x25, 0x8d,
	0x54, 0xf5, 0x71, 0x05, 0xa8, 0xe2, 0xdf, 0xbf, 0x73, 0x24, 0x97, 0xa0, 0xe7, 0xd0, 0xd3, 0x6c,
	0x86, 0x53, 0x2a, 0xb3, 0x37, 0x7d, 0x50, 0xd2, 0x1c, 0xa7, 0x14, 0xbd, 0x80, 0xfe, 0xda, 0x2c,
	0x89, 0xa9, 0xcc, 0xd9, 0xf0, 0x7b, 0xb5, 0x4f, 0x12, 0x53, 0xf4, 0xba, 0xf1, 0xcc, 0x22, 0xba,
	0x78, 0x25, 0x03, 0x35, 0x6f, 0xdf, 0x51, 0xa9, 0x0d, 0xf0, 0x57, 0x85, 0x33, 0x9e, 0xf0, 0x95,
	0xcc, 0xaf, 0x5d, 0x83, 0xdf, 0xb4, 0x8a, 0x8e, 0x01, 0x22, 0xcc, 0x68, 0x78, 0x83, 0xaf, 0x2b,
	0x2a, 0x33, 0x6b, 0xfb, 0xa6, 0x50, 0xbe, 0x0b, 0xe1, 0xf0, 0xb7, 0x01, 0xdd, 0x75, 0x38, 0x77,
	0xb6, 0xc0, 0xb8, 0xb7, 0x05, 0xf7, 0xae, 0xd7, 0x7a, 0xe0, 0x7a, 0x34, 0xc5, 0xc9, 0xb5, 0x7e,
	0x26, 0x3d, 0xe4, 0x08, 0xe9, 0x7f, 0x96, 0xe4, 0xc4, 0x86, 0x8e, 0x5a, 0x52, 0x34, 0x80, 0xfe,
	0xe5, 0x7c, 0xe1, 0x04, 0xa1, 0x3d, 0x0d, 0xdc, 0x8b, 0xf9, 0x60, 0x0b, 0xf5, 0x60, 0x77, 0xea,
	0x3b, 0x76, 0xe0, 0xcc, 0x06, 0x86, 0x28, 0x2e, 0xbd, 0x99, 0x2c, 0x5a, 0xa2, 0x98, 0x39, 0xe7,
	0x8e, 0x28, 0xda, 0x27, 0x1f, 0xa1, 0xd7, 0x08, 0x1e, 0x1d, 0x00, 0x52, 0x3e, 0x9e, 0x7f, 0x31,
	0xbb, 0x9c, 0x06, 0x61, 0xf0, 0xc3, 0x73, 0x06, 0x5b, 0xa8, 0x0b, 0xdb, 0xde, 0xb9, 0x3d, 0x1f,
	0x18, 0xc8, 0x84, 0x1d, 0x7b, 0x36, 0xbb, 0x98, 0x0f, 0x5a, 0x9f, 0xc7, 0x3f, 0xdf, 0x5e, 0x25,
	0x7c, 0x59, 0x45, 0xe3, 0x38, 0x4f, 0x27, 0x11, 0xe6, 0xf1, 0x32, 0xce, 0xcb, 0x62, 0xc2, 0xe2,
	0x25, 0x4d, 0x31, 0x9b, 0x44, 0x55, 0x72, 0x4d, 0x26, 0x57, 0xf9, 0x44, 0xfd, 0xdc, 0xa2, 0x8e,
	0xfc, 0x5b, 0x3a, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x15, 0x62, 0xa2, 0x4e, 0xac, 0x04, 0x00,
	0x00,
}
